[
  {
    "ID": "github.com/titpetric/exp/cmd/go-fsck/model",
    "Package": "model",
    "ImportPath": "github.com/titpetric/exp/cmd/go-fsck/model",
    "Path": ".",
    "TestPackage": false,
    "Doc": "",
    "Imports": {
      "declaration.go": [
        "\"go/ast\"",
        "\"strings\""
      ],
      "declaration_list.go": [
        "\"go/ast\"",
        "\"sort\"",
        "\"strings\""
      ],
      "definition.go": [
        "\"strings\""
      ],
      "package.go": [
        "\"fmt\"",
        "\"golang.org/x/tools/go/packages\""
      ],
      "string_set.go": [
        "\"fmt\"",
        "\"path\"",
        "\"slices\"",
        "\"sort\"",
        "\"strings\""
      ],
      "type_ref.go": [
        "\"strings\""
      ]
    },
    "Types": [
      {
        "Kind": "type",
        "File": "complexity.go",
        "SelfContained": true,
        "Name": "Complexity",
        "Fields": [
          {
            "Name": "Cognitive",
            "Type": "int",
            "Path": "Complexity.Cognitive",
            "JSONName": "Cognitive"
          },
          {
            "Name": "Cyclomatic",
            "Type": "int",
            "Path": "Complexity.Cyclomatic",
            "JSONName": "Cyclomatic"
          },
          {
            "Name": "Lines",
            "Type": "int",
            "Path": "Complexity.Lines",
            "JSONName": "Lines"
          }
        ],
        "Source": "type Complexity struct {\n\tCognitive\tint\n\tCyclomatic\tint\n\tLines\t\tint\n}"
      },
      {
        "Kind": "type",
        "File": "declaration.go",
        "SelfContained": true,
        "Doc": "Declaration holds information about a go symbol.",
        "Name": "Declaration",
        "Fields": [
          {
            "Name": "Kind",
            "Type": "DeclarationKind",
            "Path": "Declaration.Kind",
            "JSONName": "Kind"
          },
          {
            "Name": "Type",
            "Type": "string",
            "Path": "Declaration.Type",
            "Tag": "json:\",omitempty\"",
            "JSONName": "Type"
          },
          {
            "Name": "File",
            "Type": "string",
            "Path": "Declaration.File",
            "JSONName": "File"
          },
          {
            "Name": "SelfContained",
            "Type": "bool",
            "Path": "Declaration.SelfContained",
            "JSONName": "SelfContained"
          },
          {
            "Name": "Imports",
            "Type": "[]string",
            "Path": "Declaration.Imports",
            "Tag": "json:\",omitempty\"",
            "JSONName": "Imports"
          },
          {
            "Name": "References",
            "Type": "map[string][]string",
            "Path": "Declaration.References",
            "Tag": "json:\",omitempty\"",
            "JSONName": "References"
          },
          {
            "Name": "Doc",
            "Type": "string",
            "Path": "Declaration.Doc",
            "Tag": "json:\",omitempty\"",
            "JSONName": "Doc"
          },
          {
            "Name": "Name",
            "Type": "string",
            "Path": "Declaration.Name",
            "Tag": "json:\",omitempty\"",
            "JSONName": "Name"
          },
          {
            "Name": "Names",
            "Type": "[]string",
            "Path": "Declaration.Names",
            "Tag": "json:\",omitempty\"",
            "JSONName": "Names"
          },
          {
            "Name": "Receiver",
            "Type": "string",
            "Path": "Declaration.Receiver",
            "Tag": "json:\",omitempty\"",
            "JSONName": "Receiver"
          },
          {
            "Name": "Fields",
            "Type": "FieldList",
            "Path": "Declaration.Fields",
            "Tag": "json:\",omitempty\"",
            "JSONName": "Fields"
          },
          {
            "Name": "Arguments",
            "Type": "[]string",
            "Path": "Declaration.Arguments",
            "Tag": "json:\",omitempty\"",
            "JSONName": "Arguments"
          },
          {
            "Name": "Returns",
            "Type": "[]string",
            "Path": "Declaration.Returns",
            "Tag": "json:\",omitempty\"",
            "JSONName": "Returns"
          },
          {
            "Name": "Signature",
            "Type": "string",
            "Path": "Declaration.Signature",
            "Tag": "json:\",omitempty\"",
            "JSONName": "Signature"
          },
          {
            "Name": "Source",
            "Type": "string",
            "Path": "Declaration.Source",
            "Tag": "json:\",omitempty\"",
            "JSONName": "Source"
          },
          {
            "Name": "Complexity",
            "Type": "*Complexity",
            "Path": "Declaration.Complexity",
            "Tag": "json:\",omitempty\"",
            "JSONName": "Complexity"
          }
        ],
        "Source": "// Declaration holds information about a go symbol.\ntype Declaration struct {\n\tKind\tDeclarationKind\n\tType\tstring\t`json:\",omitempty\"`\n\n\tFile\tstring\n\n\tSelfContained\tbool\n\n\tImports\t[]string\t`json:\",omitempty\"`\n\n\tReferences\tmap[string][]string\t`json:\",omitempty\"`\n\n\tDoc\tstring\t`json:\",omitempty\"`\n\n\tName\t\tstring\t\t`json:\",omitempty\"`\n\tNames\t\t[]string\t`json:\",omitempty\"`\n\tReceiver\tstring\t\t`json:\",omitempty\"`\n\n\tFields\tFieldList\t`json:\",omitempty\"`\n\n\tArguments\t[]string\t`json:\",omitempty\"`\n\tReturns\t\t[]string\t`json:\",omitempty\"`\n\n\tSignature\tstring\t`json:\",omitempty\"`\n\tSource\t\tstring\t`json:\",omitempty\"`\n\n\tComplexity\t*Complexity\t`json:\",omitempty\"`\n}"
      },
      {
        "Kind": "type",
        "Type": "string",
        "File": "declaration_kind.go",
        "SelfContained": false,
        "Doc": "DeclarationKind is an enum of go symbol types.",
        "Name": "DeclarationKind",
        "Fields": [
          {
            "Name": "type",
            "Type": "string",
            "Path": "",
            "JSONName": ""
          }
        ],
        "Source": "// DeclarationKind is an enum of go symbol types.\ntype DeclarationKind string"
      },
      {
        "Kind": "type",
        "Type": "[]*Declaration",
        "File": "declaration_list.go",
        "SelfContained": false,
        "Doc": "DeclarationList holds a list of Go symbols.",
        "Name": "DeclarationList",
        "Fields": [
          {
            "Name": "type",
            "Type": "[]*Declaration",
            "Path": "",
            "JSONName": ""
          }
        ],
        "Source": "// DeclarationList holds a list of Go symbols.\ntype DeclarationList []*Declaration"
      },
      {
        "Kind": "type",
        "File": "definition.go",
        "SelfContained": true,
        "Doc": "Definition holds all symbols defined for a Package.",
        "Name": "Definition",
        "Fields": [
          {
            "Name": "",
            "Type": "Package",
            "Path": "Definition",
            "JSONName": ""
          },
          {
            "Name": "Doc",
            "Type": "string",
            "Path": "Definition.Doc",
            "JSONName": "Doc"
          },
          {
            "Name": "Imports",
            "Type": "StringSet",
            "Path": "Definition.Imports",
            "JSONName": "Imports"
          },
          {
            "Name": "Types",
            "Type": "DeclarationList",
            "Path": "Definition.Types",
            "JSONName": "Types"
          },
          {
            "Name": "Consts",
            "Type": "DeclarationList",
            "Path": "Definition.Consts",
            "JSONName": "Consts"
          },
          {
            "Name": "Vars",
            "Type": "DeclarationList",
            "Path": "Definition.Vars",
            "JSONName": "Vars"
          },
          {
            "Name": "Funcs",
            "Type": "DeclarationList",
            "Path": "Definition.Funcs",
            "JSONName": "Funcs"
          }
        ],
        "Source": "// Definition holds all symbols defined for a Package.\ntype Definition struct {\n\tPackage\n\n\tDoc\tstring\n\n\tImports\tStringSet\n\tTypes\tDeclarationList\n\tConsts\tDeclarationList\n\tVars\tDeclarationList\n\tFuncs\tDeclarationList\n}"
      },
      {
        "Kind": "type",
        "File": "field.go",
        "SelfContained": true,
        "Doc": "Field holds details about a field definition.",
        "Name": "Field",
        "Fields": [
          {
            "Name": "Name",
            "Type": "string",
            "Path": "Field.Name",
            "Doc": "Name is the name of the field.",
            "JSONName": "Name"
          },
          {
            "Name": "Type",
            "Type": "string",
            "Path": "Field.Type",
            "Doc": "Type is the literal type of the Go field.",
            "Tag": "json:\",omitempty\"",
            "JSONName": "Type"
          },
          {
            "Name": "Path",
            "Type": "string",
            "Path": "Field.Path",
            "Doc": "Path is the go path of this field starting from root object.",
            "JSONName": "Path"
          },
          {
            "Name": "Doc",
            "Type": "string",
            "Path": "Field.Doc",
            "Doc": "Doc holds the field doc.",
            "Tag": "json:\",omitempty\"",
            "JSONName": "Doc"
          },
          {
            "Name": "Comment",
            "Type": "string",
            "Path": "Field.Comment",
            "Doc": "Comment holds the field comment text.",
            "Tag": "json:\",omitempty\"",
            "JSONName": "Comment"
          },
          {
            "Name": "Tag",
            "Type": "string",
            "Path": "Field.Tag",
            "Doc": "Tag is the go tag, unmodified.",
            "Tag": "json:\",omitempty\"",
            "JSONName": "Tag"
          },
          {
            "Name": "JSONName",
            "Type": "string",
            "Path": "Field.JSONName",
            "Doc": "JSONName is the corresponding json name of the field.\nIt's cleared if it's set to `-` (unexported).",
            "JSONName": "JSONName"
          },
          {
            "Name": "MapKey",
            "Type": "string",
            "Path": "Field.MapKey",
            "Doc": "MapKey is the map key type, if this field is a map.",
            "Tag": "json:\",omitempty\"",
            "JSONName": "MapKey"
          }
        ],
        "Source": "// Field holds details about a field definition.\ntype Field struct {\n\t// Name is the name of the field.\n\tName\tstring\n\n\t// Type is the literal type of the Go field.\n\tType\tstring\t`json:\",omitempty\"`\n\n\t// Path is the go path of this field starting from root object.\n\tPath\tstring\n\n\t// Doc holds the field doc.\n\tDoc\tstring\t`json:\",omitempty\"`\n\n\t// Comment holds the field comment text.\n\tComment\tstring\t`json:\",omitempty\"`\n\n\t// Tag is the go tag, unmodified.\n\tTag\tstring\t`json:\",omitempty\"`\n\n\t// JSONName is the corresponding json name of the field.\n\t// It's cleared if it's set to `-` (unexported).\n\tJSONName\tstring\n\n\t// MapKey is the map key type, if this field is a map.\n\tMapKey\tstring\t`json:\",omitempty\"`\n}"
      },
      {
        "Kind": "type",
        "Type": "[]*Field",
        "File": "field_list.go",
        "SelfContained": false,
        "Doc": "FieldList contains all struct fields.",
        "Name": "FieldList",
        "Fields": [
          {
            "Name": "type",
            "Type": "[]*Field",
            "Path": "",
            "JSONName": ""
          }
        ],
        "Source": "// FieldList contains all struct fields.\ntype FieldList []*Field"
      },
      {
        "Kind": "type",
        "File": "package.go",
        "SelfContained": false,
        "Doc": "Package holds go package information.",
        "Name": "Package",
        "Fields": [
          {
            "Name": "ID",
            "Type": "string",
            "Path": "Package.ID",
            "Doc": "ID is the ID of the package as x/tools packages loads it.",
            "JSONName": "ID"
          },
          {
            "Name": "Package",
            "Type": "string",
            "Path": "Package.Package",
            "Doc": "Package is the name of the package.",
            "JSONName": "Package"
          },
          {
            "Name": "ImportPath",
            "Type": "string",
            "Path": "Package.ImportPath",
            "Doc": "ImportPath contains the import path (github...).",
            "JSONName": "ImportPath"
          },
          {
            "Name": "Path",
            "Type": "string",
            "Path": "Package.Path",
            "Doc": "Path is sanitized to contain the relative location (folder).",
            "JSONName": "Path"
          },
          {
            "Name": "TestPackage",
            "Type": "bool",
            "Path": "Package.TestPackage",
            "Doc": "TestPackage is true if this is a test package.",
            "JSONName": "TestPackage"
          },
          {
            "Name": "Pkg",
            "Type": "*packages.Package",
            "Path": "Package.Pkg",
            "Doc": "Pkg serves to carry ast package information, preventing a double Load().\nIt's used during analysis and merging and discarded for the result.",
            "Tag": "json:\"-\"",
            "JSONName": ""
          }
        ],
        "Source": "// Package holds go package information.\ntype Package struct {\n\t// ID is the ID of the package as x/tools packages loads it.\n\tID\tstring\n\t// Package is the name of the package.\n\tPackage\tstring\n\t// ImportPath contains the import path (github...).\n\tImportPath\tstring\n\t// Path is sanitized to contain the relative location (folder).\n\tPath\tstring\n\t// TestPackage is true if this is a test package.\n\tTestPackage\tbool\n\n\t// Pkg serves to carry ast package information, preventing a double Load().\n\t// It's used during analysis and merging and discarded for the result.\n\tPkg\t*packages.Package\t`json:\"-\"`\n}"
      },
      {
        "Kind": "type",
        "Type": "map[string][]string",
        "File": "string_set.go",
        "SelfContained": false,
        "Doc": "StringSet provides a key based unique string slice.",
        "Name": "StringSet",
        "Fields": [
          {
            "Name": "type",
            "Type": "map[string][]string",
            "Path": "",
            "JSONName": ""
          }
        ],
        "Source": "// StringSet provides a key based unique string slice.\ntype StringSet map[string][]string"
      }
    ],
    "Consts": [
      {
        "Kind": "const",
        "File": "declaration_kind.go",
        "SelfContained": false,
        "Names": [
          "StructKind",
          "ImportKind",
          "ConstKind",
          "TypeKind",
          "FuncKind",
          "VarKind",
          "CommentKind"
        ],
        "Source": "const (\n\tStructKind\tDeclarationKind\t= \"struct\"\n\tImportKind\t\t\t= \"import\"\n\tConstKind\t\t\t= \"const\"\n\tTypeKind\t\t\t= \"type\"\n\tFuncKind\t\t\t= \"func\"\n\tVarKind\t\t\t\t= \"var\"\n\tCommentKind\t\t\t= \"comment\"\n)"
      }
    ],
    "Vars": [],
    "Funcs": [
      {
        "Kind": "func",
        "File": "string_set.go",
        "SelfContained": false,
        "Name": "NewStringSet",
        "Returns": [
          "StringSet"
        ],
        "Signature": "NewStringSet () StringSet",
        "Source": "func NewStringSet() StringSet {\n\treturn make(StringSet)\n}",
        "Complexity": {
          "Cognitive": 0,
          "Cyclomatic": 1,
          "Lines": 3
        }
      },
      {
        "Kind": "func",
        "File": "type_ref.go",
        "SelfContained": false,
        "References": {
          "strings": [
            "HasPrefix",
            "SplitN",
            "TrimPrefix"
          ]
        },
        "Doc": "TypeRef aims to trim a type name to a reference type.",
        "Name": "TypeRef",
        "Arguments": [
          "string"
        ],
        "Returns": [
          "string"
        ],
        "Signature": "TypeRef (name string) string",
        "Source": "// TypeRef aims to trim a type name to a reference type.\nfunc TypeRef(name string) string {\n\t// trim variadic arg\n\tif strings.HasPrefix(name, \"...\") {\n\t\tname = name[3:]\n\t}\n\n\t// slice, array and map value\n\t// in terms of nesting, this is a hack\n\tif strings.HasPrefix(name, \"[\") || strings.HasPrefix(name, \"map[\") {\n\t\tname = strings.SplitN(name, \"]\", 2)[1]\n\t}\n\n\t// deref pointers\n\treturn strings.TrimPrefix(name, \"*\")\n}",
        "Complexity": {
          "Cognitive": 3,
          "Cyclomatic": 4,
          "Lines": 16
        }
      },
      {
        "Kind": "func",
        "File": "declaration.go",
        "SelfContained": false,
        "Name": "Equal",
        "Receiver": "*Declaration",
        "Arguments": [
          "*Declaration"
        ],
        "Returns": [
          "bool"
        ],
        "Signature": "Equal (in *Declaration) bool",
        "Source": "func (d *Declaration) Equal(in *Declaration) bool {\n\tif d.File == in.File \u0026\u0026 d.Kind == in.Kind \u0026\u0026 d.Name == in.Name {\n\t\treturn true\n\t}\n\treturn false\n}",
        "Complexity": {
          "Cognitive": 2,
          "Cyclomatic": 4,
          "Lines": 6
        }
      },
      {
        "Kind": "func",
        "File": "declaration.go",
        "SelfContained": false,
        "Name": "HasName",
        "Receiver": "*Declaration",
        "Arguments": [
          "string"
        ],
        "Returns": [
          "bool"
        ],
        "Signature": "HasName (find string) bool",
        "Source": "func (d *Declaration) HasName(find string) bool {\n\tfor _, name := range d.Names {\n\t\tif name == find {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn d.Name == find\n}",
        "Complexity": {
          "Cognitive": 3,
          "Cyclomatic": 3,
          "Lines": 8
        }
      },
      {
        "Kind": "func",
        "File": "declaration.go",
        "SelfContained": false,
        "References": {
          "ast": [
            "IsExported"
          ]
        },
        "Name": "IsExported",
        "Receiver": "*Declaration",
        "Returns": [
          "bool"
        ],
        "Signature": "IsExported () bool",
        "Source": "func (d *Declaration) IsExported() bool {\n\tif d.Receiver != \"\" \u0026\u0026 !ast.IsExported(TypeRef(d.Receiver)) {\n\t\treturn false\n\t}\n\n\tfor _, name := range d.Names {\n\t\tif ast.IsExported(name) {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn ast.IsExported(d.Name)\n}",
        "Complexity": {
          "Cognitive": 5,
          "Cyclomatic": 5,
          "Lines": 12
        }
      },
      {
        "Kind": "func",
        "File": "declaration.go",
        "SelfContained": false,
        "References": {
          "strings": [
            "Trim"
          ]
        },
        "Name": "Keys",
        "Receiver": "*Declaration",
        "Returns": [
          "[]string"
        ],
        "Signature": "Keys () []string",
        "Source": "func (d *Declaration) Keys() []string {\n\ttrimPath := \"*.\"\n\tif d.Name != \"\" {\n\t\treturn []string{\n\t\t\tstrings.Trim(d.Receiver+\".\"+d.Name, trimPath),\n\t\t}\n\t}\n\tif len(d.Names) != 0 {\n\t\tresult := make([]string, len(d.Names))\n\t\tfor k, v := range d.Names {\n\t\t\tresult[k] = strings.Trim(d.Receiver+\".\"+v, trimPath)\n\t\t}\n\t}\n\treturn nil\n}",
        "Complexity": {
          "Cognitive": 4,
          "Cyclomatic": 4,
          "Lines": 15
        }
      },
      {
        "Kind": "func",
        "File": "declaration.go",
        "SelfContained": false,
        "Name": "ReceiverTypeRef",
        "Receiver": "*Declaration",
        "Returns": [
          "string"
        ],
        "Signature": "ReceiverTypeRef () string",
        "Source": "func (f *Declaration) ReceiverTypeRef() string {\n\treturn TypeRef(f.Receiver)\n}",
        "Complexity": {
          "Cognitive": 0,
          "Cyclomatic": 1,
          "Lines": 3
        }
      },
      {
        "Kind": "func",
        "File": "declaration.go",
        "SelfContained": false,
        "Name": "TypeRef",
        "Receiver": "*Declaration",
        "Returns": [
          "string"
        ],
        "Signature": "TypeRef () string",
        "Source": "func (f *Declaration) TypeRef() string {\n\treturn TypeRef(f.Type)\n}",
        "Complexity": {
          "Cognitive": 1,
          "Cyclomatic": 1,
          "Lines": 3
        }
      },
      {
        "Kind": "func",
        "File": "declaration_list.go",
        "SelfContained": false,
        "Name": "Append",
        "Receiver": "*DeclarationList",
        "Arguments": [
          "...*Declaration"
        ],
        "Signature": "Append (in ...*Declaration)",
        "Source": "func (p *DeclarationList) Append(in ...*Declaration) {\n\t*p = append(*p, in...)\n}",
        "Complexity": {
          "Cognitive": 0,
          "Cyclomatic": 1,
          "Lines": 3
        }
      },
      {
        "Kind": "func",
        "File": "declaration_list.go",
        "SelfContained": false,
        "Name": "AppendUnique",
        "Receiver": "*DeclarationList",
        "Arguments": [
          "...*Declaration"
        ],
        "Signature": "AppendUnique (in ...*Declaration)",
        "Source": "func (p *DeclarationList) AppendUnique(in ...*Declaration) {\n\tfor _, i := range in {\n\t\tshouldAppend := true\n\t\tfor _, decl := range *p {\n\t\t\tif decl.Equal(i) {\n\t\t\t\tshouldAppend = false\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\tif shouldAppend {\n\t\t\t*p = append(*p, i)\n\t\t}\n\t}\n\tp.Sort()\n}",
        "Complexity": {
          "Cognitive": 8,
          "Cyclomatic": 5,
          "Lines": 16
        }
      },
      {
        "Kind": "func",
        "File": "declaration_list.go",
        "SelfContained": false,
        "References": {
          "strings": [
            "HasSuffix"
          ]
        },
        "Name": "ClearNonTestFiles",
        "Receiver": "*DeclarationList",
        "Signature": "ClearNonTestFiles ()",
        "Source": "func (p *DeclarationList) ClearNonTestFiles() {\n\tresult := DeclarationList{}\n\tfor _, decl := range *p {\n\t\tif !strings.HasSuffix(decl.File, \"_test.go\") {\n\t\t\tcontinue\n\t\t}\n\t\tresult.Append(decl)\n\t}\n\t*p = result\n}",
        "Complexity": {
          "Cognitive": 3,
          "Cyclomatic": 3,
          "Lines": 10
        }
      },
      {
        "Kind": "func",
        "File": "declaration_list.go",
        "SelfContained": false,
        "Name": "ClearSource",
        "Receiver": "*DeclarationList",
        "Signature": "ClearSource ()",
        "Source": "func (p *DeclarationList) ClearSource() {\n\tfor _, decl := range *p {\n\t\tdecl.Source = \"\"\n\t}\n}",
        "Complexity": {
          "Cognitive": 1,
          "Cyclomatic": 2,
          "Lines": 5
        }
      },
      {
        "Kind": "func",
        "File": "declaration_list.go",
        "SelfContained": false,
        "References": {
          "strings": [
            "HasSuffix"
          ]
        },
        "Name": "ClearTestFiles",
        "Receiver": "*DeclarationList",
        "Signature": "ClearTestFiles ()",
        "Source": "func (p *DeclarationList) ClearTestFiles() {\n\tresult := DeclarationList{}\n\tfor _, decl := range *p {\n\t\tif strings.HasSuffix(decl.File, \"_test.go\") {\n\t\t\tcontinue\n\t\t}\n\t\tresult.Append(decl)\n\t}\n\t*p = result\n}",
        "Complexity": {
          "Cognitive": 3,
          "Cyclomatic": 3,
          "Lines": 10
        }
      },
      {
        "Kind": "func",
        "File": "declaration_list.go",
        "SelfContained": false,
        "References": {
          "ast": [
            "IsExported"
          ],
          "sort": [
            "Slice"
          ]
        },
        "Name": "Sort",
        "Receiver": "*DeclarationList",
        "Signature": "Sort ()",
        "Source": "func (p *DeclarationList) Sort() {\n\tsort.Slice(*p, func(i, j int) bool {\n\t\ta, b := (*p)[i], (*p)[j]\n\t\tif a.Kind != b.Kind {\n\t\t\tindexOf := map[DeclarationKind]int{\n\t\t\t\tCommentKind:\t0,\n\t\t\t\tImportKind:\t1,\n\t\t\t\tConstKind:\t2,\n\t\t\t\tStructKind:\t3,\n\t\t\t\tTypeKind:\t4,\n\t\t\t\tVarKind:\t5,\n\t\t\t\tFuncKind:\t6,\n\t\t\t}\n\t\t\treturn indexOf[a.Kind] \u003c indexOf[b.Kind]\n\t\t}\n\t\tae, be := ast.IsExported(a.Name), ast.IsExported(b.Name)\n\t\tif ae != be {\n\t\t\treturn ae\n\t\t}\n\n\t\tif a.Receiver != b.Receiver {\n\t\t\tif a.Receiver == \"\" {\n\t\t\t\treturn true\n\t\t\t}\n\t\t\treturn a.Receiver \u003c b.Receiver\n\t\t}\n\n\t\tif a.Signature != b.Signature {\n\t\t\treturn a.Signature \u003c b.Signature\n\t\t}\n\n\t\treturn a.Name \u003c b.Name\n\t})\n}",
        "Complexity": {
          "Cognitive": 11,
          "Cyclomatic": 6,
          "Lines": 34
        }
      },
      {
        "Kind": "func",
        "File": "definition.go",
        "SelfContained": false,
        "References": {
          "strings": [
            "HasSuffix"
          ]
        },
        "Name": "ClearNonTestFiles",
        "Receiver": "*Definition",
        "Signature": "ClearNonTestFiles ()",
        "Source": "func (d *Definition) ClearNonTestFiles() {\n\tfor filename, _ := range d.Imports {\n\t\tif !strings.HasSuffix(filename, \"_test.go\") {\n\t\t\tdelete(d.Imports, filename)\n\t\t}\n\t}\n\td.Types.ClearNonTestFiles()\n\td.Vars.ClearNonTestFiles()\n\td.Consts.ClearNonTestFiles()\n\td.Funcs.ClearNonTestFiles()\n}",
        "Complexity": {
          "Cognitive": 3,
          "Cyclomatic": 3,
          "Lines": 11
        }
      },
      {
        "Kind": "func",
        "File": "definition.go",
        "SelfContained": false,
        "Name": "ClearSource",
        "Receiver": "*Definition",
        "Signature": "ClearSource ()",
        "Source": "func (d *Definition) ClearSource() {\n\td.Types.ClearSource()\n\td.Vars.ClearSource()\n\td.Consts.ClearSource()\n\td.Funcs.ClearSource()\n}",
        "Complexity": {
          "Cognitive": 0,
          "Cyclomatic": 1,
          "Lines": 6
        }
      },
      {
        "Kind": "func",
        "File": "definition.go",
        "SelfContained": false,
        "References": {
          "strings": [
            "HasSuffix"
          ]
        },
        "Name": "ClearTestFiles",
        "Receiver": "*Definition",
        "Signature": "ClearTestFiles ()",
        "Source": "func (d *Definition) ClearTestFiles() {\n\tfor filename, _ := range d.Imports {\n\t\tif strings.HasSuffix(filename, \"_test.go\") {\n\t\t\tdelete(d.Imports, filename)\n\t\t}\n\t}\n\td.Types.ClearTestFiles()\n\td.Vars.ClearTestFiles()\n\td.Consts.ClearTestFiles()\n\td.Funcs.ClearTestFiles()\n}",
        "Complexity": {
          "Cognitive": 3,
          "Cyclomatic": 3,
          "Lines": 11
        }
      },
      {
        "Kind": "func",
        "File": "definition.go",
        "SelfContained": false,
        "Name": "Fill",
        "Receiver": "*Definition",
        "Signature": "Fill ()",
        "Source": "func (d *Definition) Fill() {\n\tfor _, decl := range d.Order() {\n\t\tdecl.Imports = d.getImports(decl)\n\t}\n}",
        "Complexity": {
          "Cognitive": 1,
          "Cyclomatic": 2,
          "Lines": 5
        }
      },
      {
        "Kind": "func",
        "File": "definition.go",
        "SelfContained": false,
        "Name": "Merge",
        "Receiver": "*Definition",
        "Arguments": [
          "*Definition"
        ],
        "Signature": "Merge (in *Definition)",
        "Source": "func (d *Definition) Merge(in *Definition) {\n\td.TestPackage = d.TestPackage || in.TestPackage\n\n\tfor k, v := range in.Imports {\n\t\td.Imports.Add(k, v...)\n\t}\n\n\td.Types.AppendUnique(in.Types...)\n\td.Funcs.AppendUnique(in.Funcs...)\n\td.Vars.AppendUnique(in.Vars...)\n\td.Consts.AppendUnique(in.Consts...)\n\n\t// this line causes Sort to be omitted from the\n\t// definitions :/ ... solved by adding the sort\n\t// in the AppendUnique above, but the Sort symbol\n\t// should not be omitted from Definition.\n\n\t// d.Sort()\n}",
        "Complexity": {
          "Cognitive": 2,
          "Cyclomatic": 3,
          "Lines": 19
        }
      },
      {
        "Kind": "func",
        "File": "definition.go",
        "SelfContained": false,
        "Name": "Order",
        "Receiver": "*Definition",
        "Returns": [
          "[]*Declaration"
        ],
        "Signature": "Order () []*Declaration",
        "Source": "func (d *Definition) Order() []*Declaration {\n\tcount := len(d.Types) + len(d.Funcs) + len(d.Vars) + len(d.Consts)\n\tresult := make([]*Declaration, 0, count)\n\n\tresult = append(result, d.Types...)\n\tresult = append(result, d.Funcs...)\n\tresult = append(result, d.Vars...)\n\tresult = append(result, d.Consts...)\n\treturn result\n}",
        "Complexity": {
          "Cognitive": 0,
          "Cyclomatic": 1,
          "Lines": 10
        }
      },
      {
        "Kind": "func",
        "File": "definition.go",
        "SelfContained": false,
        "Doc": "Sort will sort the inner types so they have a stable order.",
        "Name": "Sort",
        "Receiver": "*Definition",
        "Signature": "Sort ()",
        "Source": "// Sort will sort the inner types so they have a stable order.\nfunc (d *Definition) Sort() {\n\td.Types.Sort()\n\td.Vars.Sort()\n\td.Consts.Sort()\n\td.Funcs.Sort()\n}",
        "Complexity": {
          "Cognitive": 0,
          "Cyclomatic": 1,
          "Lines": 7
        }
      },
      {
        "Kind": "func",
        "File": "field.go",
        "SelfContained": false,
        "Name": "TypeRef",
        "Receiver": "*Field",
        "Returns": [
          "string"
        ],
        "Signature": "TypeRef () string",
        "Source": "func (f *Field) TypeRef() string {\n\treturn TypeRef(f.Type)\n}",
        "Complexity": {
          "Cognitive": 1,
          "Cyclomatic": 1,
          "Lines": 3
        }
      },
      {
        "Kind": "func",
        "File": "string_set.go",
        "SelfContained": false,
        "References": {
          "slices": [
            "Contains"
          ]
        },
        "Name": "Add",
        "Receiver": "*StringSet",
        "Arguments": [
          "string",
          "...string"
        ],
        "Signature": "Add (key string, lits ...string)",
        "Source": "func (i *StringSet) Add(key string, lits ...string) {\n\tdata := *i\n\tif data == nil {\n\t\tdata = make(StringSet)\n\t}\n\tif set, ok := data[key]; ok {\n\t\tfor _, lit := range lits {\n\t\t\tif slices.Contains(set, lit) {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tset = append(set, lit)\n\t\t}\n\n\t\tdata[key] = set\n\t\treturn\n\t}\n\tdata[key] = lits[:]\n\t*i = data\n}",
        "Complexity": {
          "Cognitive": 7,
          "Cyclomatic": 5,
          "Lines": 19
        }
      },
      {
        "Kind": "func",
        "File": "declaration_kind.go",
        "SelfContained": false,
        "Name": "String",
        "Receiver": "DeclarationKind",
        "Returns": [
          "string"
        ],
        "Signature": "String () string",
        "Source": "func (d DeclarationKind) String() string {\n\treturn string(d)\n}",
        "Complexity": {
          "Cognitive": 0,
          "Cyclomatic": 1,
          "Lines": 3
        }
      },
      {
        "Kind": "func",
        "File": "declaration_list.go",
        "SelfContained": false,
        "Name": "Exported",
        "Receiver": "DeclarationList",
        "Returns": [
          "[]*Declaration"
        ],
        "Signature": "Exported () []*Declaration",
        "Source": "func (p DeclarationList) Exported() (result []*Declaration) {\n\tfor _, decl := range p {\n\t\tif decl.IsExported() {\n\t\t\tresult = append(result, decl)\n\t\t}\n\t}\n\treturn\n}",
        "Complexity": {
          "Cognitive": 3,
          "Cyclomatic": 3,
          "Lines": 8
        }
      },
      {
        "Kind": "func",
        "File": "declaration_list.go",
        "SelfContained": false,
        "Name": "Filter",
        "Receiver": "DeclarationList",
        "Arguments": [
          "func(d *Declaration) bool"
        ],
        "Returns": [
          "[]*Declaration"
        ],
        "Signature": "Filter (matchfn func(d *Declaration) bool) []*Declaration",
        "Source": "func (p DeclarationList) Filter(matchfn func(d *Declaration) bool) (result []*Declaration) {\n\tfor _, decl := range p {\n\t\tif matchfn(decl) {\n\t\t\tresult = append(result, decl)\n\t\t}\n\t}\n\treturn\n}",
        "Complexity": {
          "Cognitive": 3,
          "Cyclomatic": 3,
          "Lines": 8
        }
      },
      {
        "Kind": "func",
        "File": "declaration_list.go",
        "SelfContained": false,
        "Name": "Find",
        "Receiver": "DeclarationList",
        "Arguments": [
          "func(d *Declaration) bool"
        ],
        "Returns": [
          "*Declaration"
        ],
        "Signature": "Find (matchfn func(d *Declaration) bool) *Declaration",
        "Source": "func (p DeclarationList) Find(matchfn func(d *Declaration) bool) *Declaration {\n\tfor _, decl := range p {\n\t\tif matchfn(decl) {\n\t\t\treturn decl\n\t\t}\n\t}\n\treturn nil\n}",
        "Complexity": {
          "Cognitive": 3,
          "Cyclomatic": 3,
          "Lines": 8
        }
      },
      {
        "Kind": "func",
        "File": "package.go",
        "SelfContained": false,
        "Name": "Equal",
        "Receiver": "Package",
        "Arguments": [
          "Package"
        ],
        "Returns": [
          "bool"
        ],
        "Signature": "Equal (in Package) bool",
        "Source": "func (p Package) Equal(in Package) bool {\n\treturn p.ImportPath == in.ImportPath\n}",
        "Complexity": {
          "Cognitive": 0,
          "Cyclomatic": 1,
          "Lines": 3
        }
      },
      {
        "Kind": "func",
        "File": "package.go",
        "SelfContained": false,
        "Name": "Name",
        "Receiver": "Package",
        "Returns": [
          "string"
        ],
        "Signature": "Name () string",
        "Source": "func (p Package) Name() string {\n\treturn p.Package\n}",
        "Complexity": {
          "Cognitive": 0,
          "Cyclomatic": 1,
          "Lines": 3
        }
      },
      {
        "Kind": "func",
        "File": "package.go",
        "SelfContained": false,
        "References": {
          "fmt": [
            "Sprintf"
          ]
        },
        "Name": "String",
        "Receiver": "Package",
        "Returns": [
          "string"
        ],
        "Signature": "String () string",
        "Source": "func (p Package) String() string {\n\treturn fmt.Sprintf(\"package=%s import_path=%s path=%s test_package=%v\", p.Package, p.ImportPath, p.Path, p.TestPackage)\n}",
        "Complexity": {
          "Cognitive": 0,
          "Cyclomatic": 1,
          "Lines": 3
        }
      },
      {
        "Kind": "func",
        "File": "string_set.go",
        "SelfContained": false,
        "Name": "All",
        "Receiver": "StringSet",
        "Returns": [
          "[]string"
        ],
        "Signature": "All () []string",
        "Source": "func (i StringSet) All() []string {\n\tresult := []string{}\n\tfor _, set := range i {\n\t\tresult = append(result, set...)\n\t}\n\treturn result\n}",
        "Complexity": {
          "Cognitive": 1,
          "Cyclomatic": 2,
          "Lines": 7
        }
      },
      {
        "Kind": "func",
        "File": "string_set.go",
        "SelfContained": false,
        "References": {
          "sort": [
            "Strings"
          ]
        },
        "Name": "Get",
        "Receiver": "StringSet",
        "Arguments": [
          "string"
        ],
        "Returns": [
          "[]string"
        ],
        "Signature": "Get (key string) []string",
        "Source": "func (i StringSet) Get(key string) []string {\n\tval, _ := i[key]\n\tif val != nil {\n\t\tsort.Strings(val)\n\t}\n\treturn val\n}",
        "Complexity": {
          "Cognitive": 1,
          "Cyclomatic": 2,
          "Lines": 7
        }
      },
      {
        "Kind": "func",
        "File": "string_set.go",
        "SelfContained": false,
        "References": {
          "fmt": [
            "Errorf"
          ],
          "path": [
            "Base"
          ],
          "strings": [
            "ReplaceAll",
            "Contains",
            "Split",
            "Trim",
            "HasSuffix"
          ]
        },
        "Doc": "Map returns a map with the short package name as the key\nand the full import path as the value.",
        "Name": "Map",
        "Receiver": "StringSet",
        "Returns": [
          "map[string]string",
          "[]error"
        ],
        "Signature": "Map () (map[string]string, []error)",
        "Source": "// Map returns a map with the short package name as the key\n// and the full import path as the value.\nfunc (i StringSet) Map() (map[string]string, []error) {\n\twarnings := []error{}\n\twarningSeen := map[string]bool{}\n\n\taddWarning := func(warning error) {\n\t\tmsg := warning.Error()\n\t\tif _, seen := warningSeen[msg]; !seen {\n\t\t\twarningSeen[msg] = true\n\t\t\twarnings = append(warnings, warning)\n\t\t}\n\t}\n\n\tcleanPackageName := func(name string) (string, bool) {\n\t\tclean := name\n\t\tclean = strings.ReplaceAll(clean, \"_\", \"\")\n\t\treturn clean, name == clean\n\t}\n\n\tresult := map[string]string{}\n\timports := i.All()\n\n\tfor _, imported := range imports {\n\t\tvar short, long string\n\n\t\t// aliased package\n\t\timported = strings.ReplaceAll(imported, \"/go-\", \"/\")\n\t\tif strings.Contains(imported, \" \") {\n\t\t\tline := strings.Split(imported, \" \")\n\t\t\tshort, long = line[0], strings.Trim(line[1], `\"`)\n\t\t} else {\n\t\t\tlong = strings.Trim(imported, `\"`)\n\t\t\tshort = path.Base(long)\n\t\t}\n\n\t\tif short == \"C\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tif strings.HasSuffix(short, \"_test\") {\n\t\t\tclean, ok := cleanPackageName(short[:len(short)-5])\n\t\t\tif !ok {\n\t\t\t\taddWarning(fmt.Errorf(\"Alias %s should be %s_test\", short, clean))\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\n\t\tclean, ok := cleanPackageName(short)\n\t\tif !ok {\n\t\t\taddWarning(fmt.Errorf(\"Alias %s should be %s\", short, clean))\n\t\t\tcontinue\n\t\t}\n\n\t\tval, ok := result[clean]\n\n\t\tif ok \u0026\u0026 val != long {\n\t\t\twarning := \"Import conflict for %s, \"\n\t\t\t// Sort val/long so shorter is left hand side\n\t\t\tif len(val) \u003c len(long) {\n\t\t\t\twarning += val + \" != \" + long\n\t\t\t} else {\n\t\t\t\twarning += long + \" != \" + val\n\t\t\t}\n\t\t\taddWarning(fmt.Errorf(warning, short))\n\t\t}\n\n\t\tresult[clean] = long\n\t}\n\n\treturn result, warnings\n}",
        "Complexity": {
          "Cognitive": 22,
          "Cyclomatic": 11,
          "Lines": 72
        }
      },
      {
        "Kind": "func",
        "File": "definition.go",
        "SelfContained": false,
        "Name": "getImports",
        "Receiver": "*Definition",
        "Arguments": [
          "*Declaration"
        ],
        "Returns": [
          "[]string"
        ],
        "Signature": "getImports (decl *Declaration) []string",
        "Source": "func (d *Definition) getImports(decl *Declaration) []string {\n\treturn d.Imports.Get(decl.File)\n}",
        "Complexity": {
          "Cognitive": 0,
          "Cyclomatic": 1,
          "Lines": 3
        }
      }
    ]
  }
]
